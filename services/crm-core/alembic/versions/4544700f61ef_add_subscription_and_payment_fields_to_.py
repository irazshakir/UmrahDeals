"""add subscription and payment fields to tenants

Revision ID: 4544700f61ef
Revises: c6bfcfcd6ddb
Create Date: 2025-09-15 07:51:15.743833

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = '4544700f61ef'
down_revision: Union[str, Sequence[str], None] = 'c6bfcfcd6ddb'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None

# Define the enum
plan_type_enum = sa.Enum("free", "monthly", "quarterly", "yearly", name="plantype")


def upgrade() -> None:
    # 1. Create the ENUM type
    plan_type_enum.create(op.get_bind(), checkfirst=True)

    # 2. Add the new columns (using the already-created enum)
    op.add_column("tenants", sa.Column("plan_type", plan_type_enum, nullable=False))
    op.add_column("tenants", sa.Column("payment_status", sa.String(), nullable=True))
    op.add_column("tenants", sa.Column("subscription_start", sa.DateTime(), nullable=True))
    op.add_column("tenants", sa.Column("subscription_end", sa.DateTime(), nullable=True))

    # --- Keep other autogenerated columns, but REMOVE the duplicate plan_type ---
    op.add_column('tenants', sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False))
    op.add_column('tenants', sa.Column('updated_at', sa.DateTime(timezone=True), nullable=True))
    op.add_column('tenants', sa.Column('deleted_at', sa.DateTime(timezone=True), nullable=True))

    # keep subscription_status, but define its enum properly
    subscription_status_enum = sa.Enum(
        'trialing', 'active', 'cancelled', 'expired', 'grace_period',
        name='subscriptionstatus'
    )
    subscription_status_enum.create(op.get_bind(), checkfirst=True)
    op.add_column('tenants', sa.Column('subscription_status', subscription_status_enum, nullable=False))

    op.add_column('tenants', sa.Column('trial_start_date', sa.Date(), nullable=True))
    op.add_column('tenants', sa.Column('trial_end_date', sa.Date(), nullable=True))
    op.add_column('tenants', sa.Column('subscription_start_date', sa.Date(), nullable=True))
    op.add_column('tenants', sa.Column('subscription_end_date', sa.Date(), nullable=True))
    op.add_column('tenants', sa.Column('max_users', sa.Integer(), nullable=False))
    op.add_column('tenants', sa.Column('max_storage_mb', sa.Integer(), nullable=False))
    op.add_column('tenants', sa.Column('api_rate_limit', sa.Integer(), nullable=False))
    op.add_column('tenants', sa.Column('is_active', sa.Boolean(), nullable=False))
    op.add_column('tenants', sa.Column('is_suspended', sa.Boolean(), nullable=False))
    op.add_column('tenants', sa.Column('notes', sa.Text(), nullable=True))

    # constraints / indexes
    op.drop_constraint(op.f('tenants_tenant_email_key'), 'tenants', type_='unique')
    op.drop_constraint(op.f('tenants_tenant_name_key'), 'tenants', type_='unique')
    op.create_index('ix_tenants_active_suspended', 'tenants', ['is_active', 'is_suspended'], unique=False)
    op.create_index('ix_tenants_plan_status', 'tenants', ['plan_type', 'subscription_status'], unique=False)
    op.create_index(op.f('ix_tenants_plan_type'), 'tenants', ['plan_type'], unique=False)
    op.create_index(op.f('ix_tenants_subscription_status'), 'tenants', ['subscription_status'], unique=False)
    op.create_index(op.f('ix_tenants_tenant_email'), 'tenants', ['tenant_email'], unique=True)
    op.create_index(op.f('ix_tenants_tenant_name'), 'tenants', ['tenant_name'], unique=True)
    op.create_unique_constraint(None, 'tenants', ['id'])
    op.drop_column('tenants', 'tenant_is_active')

def downgrade() -> None:
    # drop new columns
    op.drop_column("tenants", "subscription_end")
    op.drop_column("tenants", "subscription_start")
    op.drop_column("tenants", "payment_status")
    op.drop_column("tenants", "plan_type")

    # drop rest of autogenerated columns
    op.drop_column('tenants', 'subscription_status')
    op.drop_column('tenants', 'trial_start_date')
    op.drop_column('tenants', 'trial_end_date')
    op.drop_column('tenants', 'subscription_start_date')
    op.drop_column('tenants', 'subscription_end_date')
    op.drop_column('tenants', 'max_users')
    op.drop_column('tenants', 'max_storage_mb')
    op.drop_column('tenants', 'api_rate_limit')
    op.drop_column('tenants', 'is_active')
    op.drop_column('tenants', 'is_suspended')
    op.drop_column('tenants', 'notes')
    op.drop_column('tenants', 'created_at')
    op.drop_column('tenants', 'updated_at')
    op.drop_column('tenants', 'deleted_at')

    # finally drop ENUMs
    plan_type_enum.drop(op.get_bind(), checkfirst=True)
    sa.Enum(name="subscriptionstatus").drop(op.get_bind(), checkfirst=True)

